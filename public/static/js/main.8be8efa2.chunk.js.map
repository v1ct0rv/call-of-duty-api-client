{"version":3,"sources":["components/Table.js","components/graphql.js","queries/queries.js","hooks/useLocalStorage.js","components/StatsGrid.js","App.js","reportWebVitals.js","index.js"],"names":["teamName","client","ApolloClient","uri","cache","InMemoryCache","getBrStats","gql","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","tableColumnConfig","title","field","type","render","rowData","br","kdRatio","toFixed","defaultSort","lastWin","matchID","moment","date","format","href","target","rel","fromNow","winsPercent","gamesPerWin","parsed","seconds","Number","d","Math","floor","h","m","s","secondsToDhms","timePlayed","className","killsPerGame","killsPerMin","sorting","remoteData","query","variables","page","perPage","sort","resolveSort","filter","resolveFilter","then","res","data","JSON","parse","stringify","brStatPagination","items","totalCount","count","orderBy","orderDirection","toUpperCase","replaceAll","_operators","gte","Date","toISOString","substring","teams","in","toLowerCase","search","username","regex","Table","team","useParams","style","width","margin","icons","columns","options","toolbar","draggable","pageSize","thirdSortClick","exportButton","getRebirthStatsQuery","useLocalStorage","key","defaultValue","useState","window","saved","localStorage","getItem","getStorageValue","value","setValue","useEffect","undefined","removeItem","setItem","lastWinCell","dataItem","timePlayedCell","StatsGrid","useQuery","loading","error","_export","React","useRef","statsGridSortField","setStatsGridSortField","statsGridSortOrder","setStatsGridSortOrder","gridDataState","dir","skip","take","state","setState","ExcelExport","rebirthStatMany","Grid","process","onDataStateChange","e","dataState","sortable","GridToolbar","onClick","current","save","GridColumn","cell","toLocaleString","App","ApolloProvider","path","exact","children","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8be8efa2.chunk.js","sourcesContent":["import React,{forwardRef} from \"react\";\nimport MaterialTable from \"material-table\";\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport { client, getBrStats } from \"./graphql\";\nimport moment from \"moment\";\nimport { useParams } from \"react-router-dom\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\nconst tableColumnConfig = [{\n    title: 'User name',\n    field: 'username',\n  },\n  // {\n  //   title: 'Platform',\n  //   field: 'platform',\n  //   sorting: false,\n  // },\n  {\n    title: 'Wins',\n    field: 'br.wins',\n    type: 'numeric',\n  },\n  {\n    title: 'KD',\n    field: 'br.kdRatio',\n    type: 'numeric',\n    render: rowData => rowData.br.kdRatio.toFixed(2),\n    defaultSort: 'desc',\n  },\n  {\n    title: 'LastWin',\n    field: 'br.lastWin.date',\n    type: 'datetime',\n    render: rowData => {\n      if(rowData.br.lastWin.matchID) {\n        return <span title={moment(rowData.br.lastWin.date).format('LLL')}><a href={`https://wzstats.gg/match/${rowData.br.lastWin.matchID}/`} target=\"_blank\" rel=\"noreferrer\">{moment(rowData.br.lastWin.date).fromNow()}</a></span>\n      }\n\n      return <span>Not Available yet</span>\n    },\n  },\n  {\n    title: 'Games',\n    field: 'br.gamesPlayed',\n    type: 'numeric',\n  },\n  {\n    title: '% Wins',\n    field: 'br.winsPercent',\n    type: 'numeric',\n    render: rowData => rowData.br.winsPercent.toFixed(2),\n  },\n  {\n    title: 'Games x Win',\n    field: 'br.gamesPerWin',\n    type: 'numeric',\n    render: rowData => rowData.br.gamesPerWin.toFixed(2),\n  },\n  {\n    title: 'Time Played',\n    field: 'br.timePlayed',\n    type: 'numeric',\n    render: rowData => {\n      const parsed = secondsToDhms(rowData.br.timePlayed)\n      return <div>{parsed.d}<span className=\"small\">D </span>{parsed.h}<span className=\"small\">H </span>{parsed.m}<span className=\"small\">MIN </span></div>\n    },\n  },\n  {\n    title: 'Kills',\n    field: 'br.kills',\n    type: 'numeric',\n  },\n  {\n    title: 'Deaths',\n    field: 'br.deaths',\n    type: 'numeric',\n  },\n  {\n    title: 'Kills x Game',\n    field: 'br.killsPerGame',\n    type: 'numeric',\n    render: rowData => rowData.br.killsPerGame.toFixed(2),\n  },\n  {\n    title: 'Kills x Min',\n    field: 'br.killsPerMin',\n    type: 'numeric',\n    render: rowData => rowData.br.killsPerMin.toFixed(2),\n  },\n  {\n    title: 'Top 5',\n    field: 'br.topFive',\n    type: 'numeric',\n  },\n  {\n    title: 'Top 10',\n    field: 'br.topTen',\n    type: 'numeric',\n  },\n  {\n    title: 'Top 25',\n    field: 'br.topTwentyFive',\n    type: 'numeric',\n  },\n  {\n    title: 'LastUpdate',\n    field: 'lastUpdate',\n    type: 'time',\n    sorting: false,\n  }\n]\n\nlet teamName;\n\nconst Table = (props)=>{\n  const { team } = useParams();\n  teamName = team\n\n  return (\n    <div className=\"App\">\n      <div style={{ width: '95%', margin: \"40px auto\" }}>\n        <div>\n          <MaterialTable\n            icons={tableIcons}\n            columns={tableColumnConfig}\n            data={remoteData}\n            title={teamName + \" Team\"}\n            options={{\n              toolbar: true,\n              sorting: true,\n              draggable: true,\n              pageSize: 20,\n              thirdSortClick: false,\n              exportButton: true\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst remoteData = (query) => {\n  //console.log(\"Query object - \", query)\n  return client.query({\n    query: getBrStats,\n    variables: {\n      page: 0,\n      perPage: 50,\n      sort: resolveSort(query),\n      filter: resolveFilter(query),\n    }\n  }).then((res) => {\n    //console.dir(query)\n    return {\n      data: JSON.parse(JSON.stringify(res.data.brStatPagination.items)), // this map is to avoid the error Cannot add property tableData, object is not extensible\n      page: query.page,\n      totalCount: res.data.brStatPagination.count\n    }\n  })\n}\n\nfunction resolveSort(query) {\n  if(!query.orderBy) return \"BR__KDRATIO_DESC\"\n\n  if(query.orderDirection === 'asc') {\n    return `${query.orderBy.field.toUpperCase().replaceAll('.', '__')}_ASC`\n  }\n  return `${query.orderBy.field.toUpperCase().replaceAll('.', '__')}_DESC`\n}\n\nfunction resolveFilter(query) {\n  let filter = {\n    _operators: {\n      date: {\n        gte: new Date().toISOString().substring(0, 10) // UTC Date\n      },\n      teams: {\n        in: teamName.toLowerCase()\n      }\n    }\n  }\n\n  if(!query.search || query.search === '') return filter\n\n  filter._operators.username = {\n    regex: query.search\n  }\n\n  return filter\n}\n\nfunction secondsToDhms(seconds) {\n  seconds = Number(seconds);\n  var d = Math.floor(seconds / (3600*24));\n  var h = Math.floor(seconds % (3600*24) / 3600);\n  var m = Math.floor(seconds % 3600 / 60);\n  var s = Math.floor(seconds % 60);\n\n  return {\n    d,\n    h,\n    m,\n    s\n  }\n}\n\nexport default Table;\n","import {\n  ApolloClient,\n  InMemoryCache,\n  gql,\n} from \"@apollo/client\";\n\nexport const client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nexport const getBrStats = gql`\n  query($page: Int, $perPage: Int, $sort: SortFindManybrstatsInput, $filter:  FilterFindManybrstatsInput){\n    brStatPagination(page: $page, perPage: $perPage, sort: $sort, filter: $filter) {\n      count\n      pageInfo {\n        pageCount\n        itemCount\n        hasNextPage\n        hasPreviousPage\n      }\n      items {\n        lastUpdate\n        platform\n        username\n        teams\n        br {\n          wins\n          kills\n          deaths\n          kdRatio\n          timePlayed\n          gamesPlayed\n          downs\n          revives\n          scorePerMinute\n          topFive\n          topTen\n          topTwentyFive\n          winsPercent\n          killsPerGame\n          gamesPerWin\n          killsPerMin\n          lastWin {\n            matchID\n            date\n            playerStats {\n              kills\n              deaths\n              kdRatio\n              gulagDeaths\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {  gql } from \"@apollo/client\";\n\nconst getRebirthStatsQuery = gql`\nquery ($filter: FilterFindManyrebirthstatsInput!) {\n  rebirthStatMany(filter: $filter) {\n      username\n      wins\n      kdRatio\n      kills\n      deaths\n      winsPercent\n      gamesPerWin\n      timePlayed\n      lastWin {\n        matchID\n        date\n      }\n      lastUpdate\n      longestStreak\n      longestStreakWin\n      maxKills\n      maxKillsWin\n    }\n  }\n`\n\nconst getBrStatsQuery = gql`\n  query($page: Int, $perPage: Int, $sort: SortFindManybrstatsInput, $filter:  FilterFindManybrstatsInput){\n    brStatPagination(page: $page, perPage: $perPage, sort: $sort, filter: $filter) {\n      count\n      pageInfo {\n        pageCount\n        itemCount\n        hasNextPage\n        hasPreviousPage\n      }\n      items {\n        lastUpdate\n        platform\n        username\n        teams\n        br {\n          wins\n          kills\n          deaths\n          kdRatio\n          timePlayed\n          gamesPlayed\n          downs\n          revives\n          scorePerMinute\n          topFive\n          topTen\n          topTwentyFive\n          winsPercent\n          killsPerGame\n          gamesPerWin\n          killsPerMin\n          lastWin {\n            matchID\n            date\n            playerStats {\n              kills\n              deaths\n              kdRatio\n              gulagDeaths\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport { getBrStatsQuery, getRebirthStatsQuery };","import { useState, useEffect } from \"react\";\n\nfunction getStorageValue(key, defaultValue) {\n  // getting stored value\n  if (typeof window !== \"undefined\") {\n    const saved = localStorage.getItem(key);\n    const initial = saved !== null ? JSON.parse(saved) : defaultValue;\n    return initial;\n  }\n}\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const [value, setValue] = useState(() => {\n    return getStorageValue(key, defaultValue);\n  });\n\n  useEffect(() => {\n    // storing input name\n    if(value === undefined){\n      localStorage.removeItem(key)\n    } else {\n      localStorage.setItem(key, JSON.stringify(value))\n    }\n  }, [key, value]);\n\n  return [value, setValue];\n};","import React, { useState } from 'react';\nimport { Grid, GridColumn, GridToolbar } from \"@progress/kendo-react-grid\";\nimport { useQuery } from '@apollo/client';\nimport { getRebirthStatsQuery } from '../queries/queries';\nimport moment from \"moment\";\nimport { process } from '@progress/kendo-data-query';\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\nimport { useParams } from \"react-router-dom\";\n\nconst lastWinCell = (props) => {\n  const field = props.field || \"\";\n  return (\n    <td>\n      <span title={moment(props.dataItem[field].date).format('LLL')}><a href={`https://wzstats.gg/match/${props.dataItem[field].matchID}/`} target=\"_blank\" rel=\"\n        noreferrer\">{moment(props.dataItem[field].date).fromNow()}</a></span>\n    </td>\n  );\n}\n\nconst timePlayedCell = (props) => {\n  const field = props.field || \"\";\n  const parsed = secondsToDhms(props.dataItem[field])\n  return (\n    <td>\n      {parsed.d}<span className=\"small\">D </span>{parsed.h}<span className=\"small\">H </span>{parsed.m}<span className=\"small\">MIN </span>\n    </td>\n  );\n}\n\nconst StatsGrid = (props) => {\n  const { team } = useParams();\n  // Load the data\n  const { loading, error, data } = useQuery(getRebirthStatsQuery, {\n    variables: {\n      filter: {\n        _operators: {\n          date: {\n            gte: new Date().toISOString().substring(0, 10) // UTC Date\n          },\n          teams: {\n            in: [\n              team.toLowerCase()\n            ]\n          }\n        }\n      }\n    }\n  })\n\n  const _export = React.useRef(null);\n  const excelExport = () => {\n    if (_export.current !== null) {\n      _export.current.save();\n    }\n  };\n\n\n  const [statsGridSortField, setStatsGridSortField] = useLocalStorage(\"statsGridSort\", \"maxKills\");\n  const [statsGridSortOrder, setStatsGridSortOrder] = useLocalStorage(\"statsGridSortOrder\", \"desc\");\n\n  // Declare a new state variable, which we'll call \"state\"\n  const [state, setState] = useState({\n    gridDataState: {\n      sort: [\n        { field: statsGridSortField, dir: statsGridSortOrder }\n      ],\n      skip: 0,\n      take: 20\n    }\n  }\n  );\n\n  const handleGridDataStateChange = (e) => {\n    setStatsGridSortField(e.dataState.sort[0]?.field)\n    setStatsGridSortOrder(e.dataState.sort[0]?.dir)\n    setState({ gridDataState: e.dataState })\n  }\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :( </p>;\n\n  return (\n    <div className=\"App\">\n      <div style={{ width: '95%', margin: \"40px auto\" }}>\n        <ExcelExport data={data.rebirthStatMany} ref={_export}>\n          <Grid\n            //   style={{\n            //       height: \"400px\",\n            //   }}\n            data={process(data.rebirthStatMany, state.gridDataState)}\n            {...state.gridDataState}\n            onDataStateChange={handleGridDataStateChange}\n            sortable={true}\n          >\n            <GridToolbar>\n              <button\n                title=\"Export Excel\"\n                className=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\"\n                onClick={excelExport}\n              >\n                Export to Excel\n              </button>\n            </GridToolbar>\n            <GridColumn field=\"username\" title=\"Username\" width=\"150px\" />\n            <GridColumn field=\"wins\" title=\"Wins\" width=\"80px\" />\n            <GridColumn field=\"maxKills\" title=\"Max Kills\" width=\"100px\" />\n            <GridColumn field=\"kdRatio\" title=\"KD\" format=\"{0:n2}\" width=\"60px\" />\n            {/* <GridColumn field=\"kdRatio\" title=\"KD\" cell={props => <td>{props.dataItem[props.field].toFixed(2)}</td>} /> */}\n            <GridColumn field=\"lastWin\" title=\"LastWin\" cell={lastWinCell} width=\"170px\" />\n            <GridColumn field=\"kills\" title=\"Kills\" width=\"90px\" />\n            <GridColumn field=\"deaths\" title=\"Deaths\" width=\"90px\" />\n            <GridColumn field=\"maxKillsWin\" title=\"maxKillsWin\" width=\"100px\" />\n            <GridColumn field=\"longestStreak\" title=\"Kill Streak\" width=\"100px\" />\n            <GridColumn field=\"longestStreakWin\" title=\"Kill Streak Win\" width=\"120px\" />\n            <GridColumn field=\"winsPercent\" title=\"% Wins\" width=\"120px\" format=\"{0:n2} %\" />\n            <GridColumn field=\"gamesPerWin\" title=\"gamesPerWin\" width=\"120px\" format=\"{0:n2}\" />\n            <GridColumn field=\"timePlayed\" title=\"timePlayed\" width=\"120px\" cell={timePlayedCell} />\n            <GridColumn field=\"lastUpdate\" title=\"Last Update\" cell={props => <td>{new Date(props.dataItem[props.field]).toLocaleString()}</td>} format=\"{0:d}\" />\n          </Grid>\n        </ExcelExport>\n      </div>\n    </div>\n  );\n};\n\nfunction secondsToDhms(seconds) {\n  seconds = Number(seconds);\n  var d = Math.floor(seconds / (3600*24));\n  var h = Math.floor(seconds % (3600*24) / 3600);\n  var m = Math.floor(seconds % 3600 / 60);\n  var s = Math.floor(seconds % 60);\n\n  return {\n    d,\n    h,\n    m,\n    s\n  }\n}\n\n// export default compose(\n//     graphql(getRebirthStatsQuery, { name: \"getRebirthStatsQuery\" })\n// )(StatsGrid);\n\nexport default StatsGrid;","import '@progress/kendo-theme-default/dist/all.css';\nimport './App.css';\nimport Table from \"./components/Table\"\nimport StatsGrid from \"./components/StatsGrid\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\nexport const client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/:team\" exact children={<Table/>} />\n            <Route path=\"/:team/rebirth\" children={<StatsGrid/>} />\n            <Route path=\"/\">\n              Please Select your Team:\n              <nav>\n                <ul>\n                  <li>\n                    <Link to=\"/hackzone\">Hackzone</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/warzone\">Warzone</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/a-team\">A-Team</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/ortonators\">Ortonators</Link>\n                  </li>\n                </ul>\n              </nav>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}