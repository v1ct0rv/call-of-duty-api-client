{"version":3,"sources":["queries/queries.js","hooks/useLocalStorage.js","components/StatsGrid.js","components/StatsContainer.js","App.js","reportWebVitals.js","index.js"],"names":["getRebirthStatsQuery","gql","getBrStatsQuery","useLocalStorage","key","defaultValue","useState","window","saved","localStorage","getItem","JSON","parse","getStorageValue","value","setValue","useEffect","undefined","removeItem","setItem","stringify","lastWinCell","props","field","title","moment","dataItem","date","format","href","matchID","target","rel","fromNow","SvgIcon","icon","hyperlinkOpenSmIcon","size","winIsWinCell","timePlayedCell","parsed","seconds","Number","d","Math","floor","h","m","s","secondsToDhms","className","StatsGrid","query","mode","team","gridData","useQuery","variables","filter","_operators","gte","Date","toISOString","substring","teams","in","toLowerCase","loading","error","data","_export","React","useRef","statsGridSortField","setStatsGridSortField","statsGridSortOrder","setStatsGridSortOrder","gridDataState","sort","dir","skip","take","state","setState","brStatMany","map","x","tempData","br","lastUpdate","username","rebirthStatMany","ExcelExport","ref","Grid","process","onDataStateChange","e","dataState","sortable","GridToolbar","onClick","current","save","GridColumn","width","cell","toLocaleString","StatsContainer","useParams","selectedTab","selected","setSelected","style","margin","TabStrip","onSelect","ReactGA","pageview","location","pathname","search","replace","TabStripTab","client","ApolloClient","uri","cache","InMemoryCache","App","initialize","ApolloProvider","path","children","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3908c135.chunk.js","sourcesContent":["import {  gql } from \"@apollo/client\";\n\nconst getRebirthStatsQuery = gql`\n  query ($filter: FilterFindManyrebirthstatsInput!) {\n    rebirthStatMany(filter: $filter) {\n      username\n      wins\n      kdRatio\n      kills\n      deaths\n      winsPercent\n      gamesPerWin\n      timePlayed\n      lastWin {\n        matchID\n        date\n      }\n      lastUpdate\n      longestStreak\n      longestStreakWin\n      maxKills\n      maxKillsWin\n      winIsWin\n      lastWinIsWinMatchId\n    }\n  }\n`\n\nconst getBrStatsQuery = gql`\n  query ($filter: FilterFindManybrstatsInput!) {\n    brStatMany(filter: $filter) {\n      lastUpdate\n      username\n      br {\n        wins\n        kdRatio\n        kills\n        deaths\n        winsPercent\n        gamesPerWin\n        timePlayed\n        lastWin {\n          matchID\n          date\n        }\n        longestStreak\n        longestStreakWin\n        maxKills\n        maxKillsWin\n        winIsWin\n        lastWinIsWinMatchId\n      }\n    }\n}\n`\n\nexport { getBrStatsQuery, getRebirthStatsQuery };\n","import { useState, useEffect } from \"react\";\n\nfunction getStorageValue(key, defaultValue) {\n  // getting stored value\n  if (typeof window !== \"undefined\") {\n    const saved = localStorage.getItem(key);\n    const initial = saved !== null ? JSON.parse(saved) : defaultValue;\n    return initial;\n  }\n}\n\nexport const useLocalStorage = (key, defaultValue) => {\n  const [value, setValue] = useState(() => {\n    return getStorageValue(key, defaultValue);\n  });\n\n  useEffect(() => {\n    // storing input name\n    if(value === undefined){\n      localStorage.removeItem(key)\n    } else {\n      localStorage.setItem(key, JSON.stringify(value))\n    }\n  }, [key, value]);\n\n  return [value, setValue];\n};","import React, { useState } from 'react';\nimport { Grid, GridColumn, GridToolbar } from \"@progress/kendo-react-grid\";\nimport { useQuery } from '@apollo/client';\nimport { getBrStatsQuery, getRebirthStatsQuery } from '../queries/queries';\nimport moment from \"moment\";\nimport { process } from '@progress/kendo-data-query';\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\nimport { SvgIcon } from \"@progress/kendo-react-common\";\nimport { hyperlinkOpenSmIcon } from \"@progress/kendo-svg-icons\";\n\nconst lastWinCell = (props) => {\n  const field = \"lastWin\" //props.field || \"\";\n  return (\n    <td>\n      <span title={moment(props.dataItem[field].date).format('LLL')}><a href={`https://wzstats.gg/match/${props.dataItem[field].matchID}/`} target=\"_blank\" rel=\"\n        noreferrer\">{moment(props.dataItem[field].date).fromNow()} <SvgIcon icon={hyperlinkOpenSmIcon} size=\"small\" /></a></span>\n    </td>\n  );\n}\n\nconst winIsWinCell = (props) => {\n  return (\n    <td>\n      <span title={moment(props.dataItem[\"lastWinIsWinDate\"]).format('LLL')}><a href={`https://wzstats.gg/match/${props.dataItem[\"lastWinIsWinMatchId\"]}/`} target=\"_blank\" rel=\"\n        noreferrer\">{props.dataItem[\"winIsWin\"]} <SvgIcon icon={hyperlinkOpenSmIcon} size=\"small\" /></a></span>\n    </td>\n  );\n}\n\nconst timePlayedCell = (props) => {\n  const field = props.field || \"\";\n  const parsed = secondsToDhms(props.dataItem[field])\n  return (\n    <td>\n      {parsed.d}<span className=\"small\">D </span>{parsed.h}<span className=\"small\">H </span>{parsed.m}<span className=\"small\">MIN </span>\n    </td>\n  );\n}\n\nconst StatsGrid = (props) => {\n  const mode = props.mode\n  const team = props.team\n\n  let query\n  if (mode === 'br') {\n    query = getBrStatsQuery\n  } else {\n    query = getRebirthStatsQuery\n  }\n\n  // Load the data\n  const { loading, error, data } = useQuery(query, {\n    variables: {\n      filter: {\n        _operators: {\n          date: {\n            gte: new Date().toISOString().substring(0, 10) // UTC Date\n          },\n          teams: {\n            in: [\n              team.toLowerCase()\n            ]\n          }\n        }\n      }\n    }\n  })\n\n  const _export = React.useRef(null);\n  const excelExport = () => {\n    if (_export.current !== null) {\n      _export.current.save();\n    }\n  };\n\n\n  const [statsGridSortField, setStatsGridSortField] = useLocalStorage(\"statsGridSort\", \"maxKills\");\n  const [statsGridSortOrder, setStatsGridSortOrder] = useLocalStorage(\"statsGridSortOrder\", \"desc\");\n\n  // Declare a new state variable, which we'll call \"state\"\n  const [state, setState] = useState({\n    gridDataState: {\n      sort: [\n        { field: statsGridSortField, dir: statsGridSortOrder }\n      ],\n      skip: 0,\n      take: 20\n    }\n  }\n  );\n\n  const handleGridDataStateChange = (e) => {\n    setStatsGridSortField(e.dataState.sort[0]?.field)\n    setStatsGridSortOrder(e.dataState.sort[0]?.dir)\n    setState({ gridDataState: e.dataState })\n  }\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :( </p>;\n\n  // Parse data\n  let gridData\n  if (mode === 'br') {\n    gridData = data.brStatMany.map(x => {\n      let tempData = { ...x.br }\n      tempData.lastUpdate = x.lastUpdate\n      tempData.username = x.username\n      return tempData\n    })\n  } else {\n    gridData = data.rebirthStatMany\n  }\n\n  return (\n    <ExcelExport data={gridData} ref={_export}>\n      <Grid\n        //   style={{\n        //       height: \"400px\",\n        //   }}\n        data={process(gridData, state.gridDataState)}\n        {...state.gridDataState}\n        onDataStateChange={handleGridDataStateChange}\n        sortable={true}\n      >\n        <GridToolbar>\n          <button\n            title=\"Export Excel\"\n            className=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\"\n            onClick={excelExport}\n          >\n            Export to Excel\n          </button>\n        </GridToolbar>\n        <GridColumn field=\"username\" title=\"Username\" width=\"150px\" />\n        <GridColumn field=\"wins\" title=\"Wins\" width=\"80px\" />\n        <GridColumn field=\"maxKills\" title=\"Max Kills Match\" width=\"140px\" />\n        <GridColumn field=\"kdRatio\" title=\"KD\" format=\"{0:n2}\" width=\"60px\" />\n        {/* <GridColumn field=\"kdRatio\" title=\"KD\" cell={props => <td>{props.dataItem[props.field].toFixed(2)}</td>} /> */}\n        <GridColumn field=\"lastWin.date\" title=\"LastWin\" cell={lastWinCell} width=\"170px\" />\n        <GridColumn field=\"winIsWin\" title=\"WinIsWin\" cell={winIsWinCell} width=\"110px\" />\n        <GridColumn field=\"kills\" title=\"Kills\" width=\"80px\" />\n        <GridColumn field=\"deaths\" title=\"Deaths\" width=\"90px\" />\n        <GridColumn field=\"maxKillsWin\" title=\"maxKillsWin\" width=\"100px\" />\n        <GridColumn field=\"longestStreak\" title=\"Kill Streak\" width=\"100px\" />\n        <GridColumn field=\"longestStreakWin\" title=\"Kill Streak Win\" width=\"120px\" />\n        <GridColumn field=\"winsPercent\" title=\"% Wins\" width=\"120px\" format=\"{0:n2} %\" />\n        <GridColumn field=\"gamesPerWin\" title=\"gamesPerWin\" width=\"120px\" format=\"{0:n2}\" />\n        <GridColumn field=\"timePlayed\" title=\"timePlayed\" width=\"120px\" cell={timePlayedCell} />\n        <GridColumn field=\"lastUpdate\" title=\"Last Update\" cell={props => <td>{new Date(props.dataItem[props.field]).toLocaleString()}</td>} format=\"{0:d}\" />\n      </Grid>\n    </ExcelExport>\n  );\n};\n\nfunction secondsToDhms(seconds) {\n  seconds = Number(seconds);\n  var d = Math.floor(seconds / (3600 * 24));\n  var h = Math.floor(seconds % (3600 * 24) / 3600);\n  var m = Math.floor(seconds % 3600 / 60);\n  var s = Math.floor(seconds % 60);\n\n  return {\n    d,\n    h,\n    m,\n    s\n  }\n}\n\n// export default compose(\n//     graphql(getRebirthStatsQuery, { name: \"getRebirthStatsQuery\" })\n// )(StatsGrid);\n\nexport default StatsGrid;\n","import * as React from 'react';\nimport StatsGrid from \"./StatsGrid\"\nimport { TabStrip, TabStripTab } from '@progress/kendo-react-layout';\nimport { useParams } from \"react-router-dom\";\nimport ReactGA from 'react-ga';\n\nconst StatsContainer = (props) => {\n\n  const { team, mode } = useParams();\n\n  const selectedTab = mode === 'br' ? 0 : 1;\n\n  const [selected, setSelected] = React.useState(selectedTab);\n\n  const handleSelect = e => {\n    if(e.selected === 1) {\n      ReactGA.pageview((window.location.pathname + window.location.search).replace(\"br\", \"rebirth\"));\n    } else {\n      ReactGA.pageview((window.location.pathname + window.location.search));\n    }\n    setSelected(e.selected);\n  };\n\n  return (\n    <div className=\"App\">\n      <div style={{ width: '95%', margin: \"40px auto\" }}>\n        <TabStrip selected={selected} onSelect={handleSelect}>\n          <TabStripTab title=\"BR\" key=\"1\">\n            <StatsGrid mode=\"br\" team={team} />\n          </TabStripTab>\n          <TabStripTab title=\"Rebirth\" key=\"2\">\n            <StatsGrid mode=\"rebirth\" team={team} />\n          </TabStripTab>\n        </TabStrip>\n      </div></div>\n  )\n}\n\nexport default StatsContainer","import '@progress/kendo-theme-default/dist/all.css';\nimport './App.css';\nimport React, {useEffect } from 'react';\nimport StatsContainer from \"./components/StatsContainer\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport ReactGA from 'react-ga';\n\nexport const client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nconst TRACKING_ID = \"UA-76639346-2\"; // OUR_TRACKING_ID\n\nfunction App() {\n  ReactGA.initialize(TRACKING_ID);\n\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }, []);\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          {/* A <Switch> looks through its children <Route>s and\n              renders the first one that matches the current URL. */}\n          <Switch>\n            {/* <Route path=\"/:team\" exact children={<Table/>} /> */}\n            <Route path=\"/:team/:mode\" children={<StatsContainer />} />\n            <Route path=\"/\">\n              Please Select your Team:\n              <nav>\n                <ul>\n                  <li>\n                    <Link to=\"/hackzone/br\">Hackzone</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/warzone/br\">Warzone</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/a-team/br\">A-Team</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/ortonators/br\">Ortonators</Link>\n                  </li>\n                </ul>\n              </nav>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}